[{"C:\\Chatlix\\client\\src\\index.js":"1","C:\\Chatlix\\client\\src\\reportWebVitals.js":"2","C:\\Chatlix\\client\\src\\App.js":"3","C:\\Chatlix\\client\\src\\modules\\Dashboard\\index.js":"4","C:\\Chatlix\\client\\src\\modules\\form\\index.js":"5","C:\\Chatlix\\client\\src\\components\\Button\\index.js":"6","C:\\Chatlix\\client\\src\\components\\Input\\index.js":"7"},{"size":581,"mtime":1690562281329,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1689970199391,"results":"10","hashOfConfig":"9"},{"size":1141,"mtime":1690305430758,"results":"11","hashOfConfig":"9"},{"size":11232,"mtime":1690564454340,"results":"12","hashOfConfig":"9"},{"size":2790,"mtime":1690385451374,"results":"13","hashOfConfig":"9"},{"size":469,"mtime":1690019905876,"results":"14","hashOfConfig":"9"},{"size":698,"mtime":1690233572386,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"2h5d6j",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"C:\\Chatlix\\client\\src\\index.js",[],[],[],"C:\\Chatlix\\client\\src\\reportWebVitals.js",[],[],"C:\\Chatlix\\client\\src\\App.js",[],[],"C:\\Chatlix\\client\\src\\modules\\Dashboard\\index.js",["39","40","41","42","43","44","45","46"],[],"import React, { useEffect, useRef, useState } from 'react'\r\nimport Avatar from '../../assets/User.png'\r\nimport Input from '../../components/Input'\r\nimport { io } from 'socket.io-client';\r\n\r\nconst Dashboard = () => {\r\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('user:details')));\r\n    const [conversations, setConversations] = useState([]);\r\n    const [messages, setMessages] = useState({});\r\n    const [message, setMessage] = useState('');\r\n    const [users, setUsers] = useState([]);\r\n    const [socket, setSocket] = useState(null);\r\n    const messageRef = useRef(null);\r\n\r\n    useEffect(()=>{\r\n        setSocket(io('http://localhost:8080'))\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        socket?.emit('addUser', user?.id)\r\n        socket?.on('getUsers', users =>{\r\n            console.log(users)\r\n        })\r\n\r\n        socket?.on('getMessage',  data => {\r\n            setMessages(prev => ({\r\n                ...prev,\r\n                messages: [...prev.messages, { user : data.user, message: data.message }],\r\n            }));\r\n        })\r\n    }, [socket])\r\n\r\n\r\n    useEffect(()=>{\r\n        messageRef?.current?.scrollIntoView({behavior: 'smooth'})\r\n    }, [messages?.messages])\r\n\r\nuseEffect(()=>{\r\n    const loggedInUser = JSON.parse(localStorage.getItem('user:details')\r\n)\r\n\r\n    const fetchConversations = async()=>{\r\n        const res = await fetch(`http://localhost:8000/api/conversations/${loggedInUser?.id}`, {\r\n            method: 'GET',\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        const resData = await res.json();\r\n        setConversations(resData);\r\n    }\r\n    fetchConversations();\r\n}, [])\r\n\r\nuseEffect(()=>{\r\n    const fetchUsers = async()=>{\r\n        const res = await fetch(`http://localhost:8000/api/users/${user?.id}`,{\r\n            method:'GET',\r\n            headers:{\r\n                'Content-Type' : 'application/json',\r\n            }\r\n        });\r\n        const resData = await res.json();\r\n        setUsers(resData);\r\n    }\r\n    fetchUsers();\r\n},[]);\r\n\r\n\r\nconst fetchMessages = async(conversationId, receiver)=>{\r\n    const res = await fetch(`http://localhost:8000/api/message/${conversationId}?senderId=${user?.id}&&receiverId=${receiver?.receiverId}`,{\r\n    method:'GET',\r\n    headers:{\r\n        'Content-Type': 'application/json',\r\n    }\r\n    });\r\nconst resData = await res.json();\r\nsetMessages({messages: resData, receiver, conversationId});\r\n}\r\n\r\nconst sendMessage = async(e)=>{\r\n    setMessage('')\r\n    socket?.emit('sendMessage',{\r\n        senderId: user?.id,\r\n        receiverId: messages?.receiver?.receiverId,\r\n        message,\r\n        conversationId: messages?.conversationId,\r\n    })\r\n     const res = await fetch(`http://localhost:8000/api/message`,{\r\n        method:'POST',\r\n        headers:{\r\n            'Content-Type':'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            conversationId: messages?.conversationId,\r\n            senderId: user?.id,\r\n            message,\r\n            receiverId: messages?.receiver?.receiverId\r\n        })\r\n     });\r\n     setMessage('');\r\n}\r\n\r\n  return (\r\n    // <div className=\"bg-light h-screen flex justify-center items-center\">\r\n    <div className='w-screen flex'>\r\n      <div className='w-[25%] h-screen bg-secondary overflow-scroll'>\r\n        <div className='flex items-center ml-8 my-8 mx-10'>\r\n            <div className='border border-primary p-[2px] rounded-full'>\r\n                <img src={Avatar} width={60} height={60}/>\r\n            </div>\r\n            <div className='ml-8'>\r\n                <h3 className='text-2xl'>{user?.name}</h3>\r\n                <p className='text-lg font-light'>My Account</p>\r\n            </div>\r\n        </div>\r\n            <hr/>\r\n            <div className='mx-8 mt-6'>\r\n                <div className='text-primary text-xl ml-4 mt-4'>Messages</div>\r\n                <div >\r\n                    {\r\n                        conversations.length > 0 ?\r\n                        conversations.map(({conversationId,user}) => {\r\n                            return(\r\n                                <div className='flex items-center py-8 border-b border-b-gray-300'>\r\n                                    <div className='cursor-pointer flex items-center' onClick={()=> fetchMessages(conversationId, user)}>\r\n                                        <div className=''><img src={Avatar} width={50} height={50}/></div>\r\n                                        <div className='ml-6'>\r\n                                            <h3 className='text-lg font-semibold'>{user?.name}</h3>\r\n                                            <p className='text-sm font-light text-gray-600'>{user?.mobile}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        ) : <div className='text-center text-lg font-semibold my-auto mt-24'>No Conversations... </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n      </div>\r\n      <div className='w-[50%] h-screen bg-white flex flex-col items-center'>\r\n        {\r\n            messages?.receiver?.name &&\r\n        <div className='w-[75%] bg-secondary h-[80px] my-14 rounded-full flex items-center px-14 '>\r\n        <div className='cursor-pointer'><img src={Avatar} width={50} height={50}/></div>\r\n        <div className='ml-6 mr-auto'>\r\n            <h3 className='text-lg font-semibold'>{messages?.receiver?.name}</h3>\r\n            <p className='text-sm font-light text-gray-600'>{messages?.receiver?.mobile}</p>\r\n        </div>\r\n        <div className='flex w-[30%] ml-auto justify-'>\r\n\r\n            <p className='text-sm font-bold text-green-600 w-1/3'>Online</p>\r\n        <div className='cursor-pointer w-1/3'>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon icon-tabler icon-tabler-brand-zoom\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n            <path d=\"M17.011 9.385v5.128l3.989 3.487v-12z\"></path>\r\n            <path d=\"M3.887 6h10.08c1.468 0 3.033 1.203 3.033 2.803v8.196a.991 .991 0 0 1 -.975 1h-10.373c-1.667 0 -2.652 -1.5 -2.652 -3l.01 -8a.882 .882 0 0 1 .208 -.71a.841 .841 0 0 1 .67 -.287z\"></path>\r\n            </svg>\r\n        </div>\r\n        <div className='cursor-pointer w-1/3'>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon icon-tabler icon-tabler-phone-plus\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"black\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n            <path d=\"M5 4h4l2 5l-2.5 1.5a11 11 0 0 0 5 5l1.5 -2.5l5 2v4a2 2 0 0 1 -2 2a16 16 0 0 1 -15 -15a2 2 0 0 1 2 -2\"></path>\r\n            <path d=\"M15 6h6m-3 -3v6\"></path>\r\n            </svg>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        }\r\n        <div className='h-[75%] w-full overflow-scroll border-b-2 shadow-sm'> \r\n                    <div className='p-14'>\r\n                        {\r\n                            messages?.messages?.length > 0 ?\r\n                            messages.messages.map(({message, user: {id} = {}})=>{\r\n                                return (\r\n                                    <>\r\n                                    <div className={`max-w-[40%] rounded-b-3xl p-4 mb-8  ${id === user?.id ? \" text-white ml-auto bg-primary rounded-tl-3xl\" : \"bg-secondary rounded-tr-3xl\" } `}>{message}</div>\r\n                                    <div ref={messageRef}></div>\r\n                                    </>\r\n                                )\r\n                            }) : <div className='text-center text-lg font-semibold mt-24'>No Messages or No Conversation Selected</div>\r\n                        }\r\n                        \r\n                    </div>\r\n        </div>\r\n        {\r\n            messages?.receiver?.name &&\r\n      <div className='p-14 w-full flex items-center'>\r\n        \r\n                    <Input className='w-[75%]' placeholder='Type a Message' value={message} onChange={(e)=>setMessage(e.target.value)} inputClassName='p-4 border-0 shadow-md rounded-full bg-light focus:ring-0 focus:border-0 outline-none' />\r\n                    <div className={`ml-4 p-2 cursor-pointer bg-light rounded-full ${!message && 'pointer-events-none'}`} onClick={()=>sendMessage()}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon icon-tabler icon-tabler-send\" width=\"30\" height=\"30\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n                        <path d=\"M10 14l11 -11\"></path>\r\n                        <path d=\"M21 3l-6.5 18a.55 .55 0 0 1 -1 0l-3.5 -7l-7 -3.5a.55 .55 0 0 1 0 -1l18 -6.5\"></path>\r\n                        </svg>\r\n                    </div>\r\n                    <div className={`ml-4 p-2 cursor-pointer bg-light rounded-full ${!message && 'pointer-events-none'}`}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon icon-tabler icon-tabler-square-rounded-plus\" width=\"30\" height=\"30\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n                        <path d=\"M9 12h6\"></path>\r\n                        <path d=\"M12 9v6\"></path>\r\n                        <path d=\"M12 3c7.2 0 9 1.8 9 9s-1.8 9 -9 9s-9 -1.8 -9 -9s1.8 -9 9 -9z\"></path>\r\n                        </svg>\r\n                    </div>\r\n      </div>\r\n        }\r\n      </div>\r\n      <div className='w-[25%] h-screen bg-light px-8 py-16 overflow-scroll'>\r\n            <div className='text-primary text-xl'>Contacts</div>\r\n            <div >\r\n                    {\r\n                        users.length > 0 ?\r\n                        users.map(({userId, user}) => {\r\n                            return(\r\n                                <div className='flex items-center py-8 border-b border-b-gray-300'>\r\n                                    <div className='cursor-pointer flex items-center' onClick={()=> fetchMessages('new', user)}>\r\n                                        <div className=''><img src={Avatar} width={50} height={50}/></div>\r\n                                        <div className='ml-6'>\r\n                                            <h3 className='text-lg font-semibold'>{user?.name}</h3>\r\n                                            <p className='text-sm font-light text-gray-600'>{user?.mobile}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        ) : <div className='text-center text-lg font-semibold my-auto mt-24'>No Conversations... </div>\r\n                    }\r\n                </div>\r\n      </div>\r\n    </div>\r\n    // </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Chatlix\\client\\src\\modules\\form\\index.js",[],[],"C:\\Chatlix\\client\\src\\components\\Button\\index.js",[],[],"C:\\Chatlix\\client\\src\\components\\Input\\index.js",[],[],{"ruleId":"47","severity":1,"message":"48","line":7,"column":18,"nodeType":"49","messageId":"50","endLine":7,"endColumn":25},{"ruleId":"51","severity":1,"message":"52","line":31,"column":8,"nodeType":"53","endLine":31,"endColumn":16,"suggestions":"54"},{"ruleId":"51","severity":1,"message":"52","line":67,"column":3,"nodeType":"53","endLine":67,"endColumn":5,"suggestions":"55"},{"ruleId":"47","severity":1,"message":"56","line":89,"column":12,"nodeType":"49","messageId":"50","endLine":89,"endColumn":15},{"ruleId":"57","severity":1,"message":"58","line":110,"column":17,"nodeType":"59","endLine":110,"endColumn":59},{"ruleId":"57","severity":1,"message":"58","line":127,"column":59,"nodeType":"59","endLine":127,"endColumn":101},{"ruleId":"57","severity":1,"message":"58","line":144,"column":41,"nodeType":"59","endLine":144,"endColumn":83},{"ruleId":"57","severity":1,"message":"58","line":217,"column":59,"nodeType":"59","endLine":217,"endColumn":101},"no-unused-vars","'setUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user?.id'. Either include it or remove the dependency array.","ArrayExpression",["60"],["61"],"'res' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},"Update the dependencies array to be: [socket, user?.id]",{"range":"66","text":"67"},"Update the dependencies array to be: [user?.id]",{"range":"68","text":"69"},[1072,1080],"[socket, user?.id]",[2062,2064],"[user?.id]"]